#include <vector>
#include "caffe/common_layers.hpp"
#include "caffe/layer.hpp"
#include "caffe/util/math_functions.hpp"

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/highgui/highgui_c.h>
#include <opencv2/imgproc/imgproc.hpp>

namespace caffe {

template <typename Dtype>
void ShowImgLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
  // Do nothing.
	CHECK_EQ(bottom.size(), this->layer_param().show_img_param().image_type_size());

#ifdef USE_MPI
	if  (Caffe::MPI_my_rank() == 0)
#endif
	{
		float color_map[256][3] = 
			{{0,0,0},
			{0.5020,0,0},
			{0,0.5020,0},
			{0.5020,0.5020,0},
			{0,0,0.5020},
			{0.5020,0,0.5020},
			{0,0.5020,0.5020},
			{0.5020,0.5020,0.5020},
			{0.2510,0,0},
			{0.7529,0,0},
			{0.2510,0.5020,0},
			{0.7529,0.5020,0},
			{0.2510,0,0.5020},
			{0.7529,0,0.5020},
			{0.2510,0.5020,0.5020},
			{0.7529,0.5020,0.5020},
			{0,0.2510,0},
			{0.5020,0.2510,0},
			{0,0.7529,0},
			{0.5020,0.7529,0},
			{0,0.2510,0.5020},
			{0.5020,0.2510,0.5020},
			{0,0.7529,0.5020},
			{0.5020,0.7529,0.5020},
			{0.2510,0.2510,0},
			{0.7529,0.2510,0},
			{0.2510,0.7529,0},
			{0.7529,0.7529,0},
			{0.2510,0.2510,0.5020},
			{0.7529,0.2510,0.5020},
			{0.2510,0.7529,0.5020},
			{0.7529,0.7529,0.5020},
			{0,0,0.2510},
			{0.5020,0,0.2510},
			{0,0.5020,0.2510},
			{0.5020,0.5020,0.2510},
			{0,0,0.7529},
			{0.5020,0,0.7529},
			{0,0.5020,0.7529},
			{0.5020,0.5020,0.7529},
			{0.2510,0,0.2510},
			{0.7529,0,0.2510},
			{0.2510,0.5020,0.2510},
			{0.7529,0.5020,0.2510},
			{0.2510,0,0.7529},
			{0.7529,0,0.7529},
			{0.2510,0.5020,0.7529},
			{0.7529,0.5020,0.7529},
			{0,0.2510,0.2510},
			{0.5020,0.2510,0.2510},
			{0,0.7529,0.2510},
			{0.5020,0.7529,0.2510},
			{0,0.2510,0.7529},
			{0.5020,0.2510,0.7529},
			{0,0.7529,0.7529},
			{0.5020,0.7529,0.7529},
			{0.2510,0.2510,0.2510},
			{0.7529,0.2510,0.2510},
			{0.2510,0.7529,0.2510},
			{0.7529,0.7529,0.2510},
			{0.2510,0.2510,0.7529},
			{0.7529,0.2510,0.7529},
			{0.2510,0.7529,0.7529},
			{0.7529,0.7529,0.7529},
			{0.1255,0,0},
			{0.6275,0,0},
			{0.1255,0.5020,0},
			{0.6275,0.5020,0},
			{0.1255,0,0.5020},
			{0.6275,0,0.5020},
			{0.1255,0.5020,0.5020},
			{0.6275,0.5020,0.5020},
			{0.3765,0,0},
			{0.8784,0,0},
			{0.3765,0.5020,0},
			{0.8784,0.5020,0},
			{0.3765,0,0.5020},
			{0.8784,0,0.5020},
			{0.3765,0.5020,0.5020},
			{0.8784,0.5020,0.5020},
			{0.1255,0.2510,0},
			{0.6275,0.2510,0},
			{0.1255,0.7529,0},
			{0.6275,0.7529,0},
			{0.1255,0.2510,0.5020},
			{0.6275,0.2510,0.5020},
			{0.1255,0.7529,0.5020},
			{0.6275,0.7529,0.5020},
			{0.3765,0.2510,0},
			{0.8784,0.2510,0},
			{0.3765,0.7529,0},
			{0.8784,0.7529,0},
			{0.3765,0.2510,0.5020},
			{0.8784,0.2510,0.5020},
			{0.3765,0.7529,0.5020},
			{0.8784,0.7529,0.5020},
			{0.1255,0,0.2510},
			{0.6275,0,0.2510},
			{0.1255,0.5020,0.2510},
			{0.6275,0.5020,0.2510},
			{0.1255,0,0.7529},
			{0.6275,0,0.7529},
			{0.1255,0.5020,0.7529},
			{0.6275,0.5020,0.7529},
			{0.3765,0,0.2510},
			{0.8784,0,0.2510},
			{0.3765,0.5020,0.2510},
			{0.8784,0.5020,0.2510},
			{0.3765,0,0.7529},
			{0.8784,0,0.7529},
			{0.3765,0.5020,0.7529},
			{0.8784,0.5020,0.7529},
			{0.1255,0.2510,0.2510},
			{0.6275,0.2510,0.2510},
			{0.1255,0.7529,0.2510},
			{0.6275,0.7529,0.2510},
			{0.1255,0.2510,0.7529},
			{0.6275,0.2510,0.7529},
			{0.1255,0.7529,0.7529},
			{0.6275,0.7529,0.7529},
			{0.3765,0.2510,0.2510},
			{0.8784,0.2510,0.2510},
			{0.3765,0.7529,0.2510},
			{0.8784,0.7529,0.2510},
			{0.3765,0.2510,0.7529},
			{0.8784,0.2510,0.7529},
			{0.3765,0.7529,0.7529},
			{0.8784,0.7529,0.7529},
			{0,0.1255,0},
			{0.5020,0.1255,0},
			{0,0.6275,0},
			{0.5020,0.6275,0},
			{0,0.1255,0.5020},
			{0.5020,0.1255,0.5020},
			{0,0.6275,0.5020},
			{0.5020,0.6275,0.5020},
			{0.2510,0.1255,0},
			{0.7529,0.1255,0},
			{0.2510,0.6275,0},
			{0.7529,0.6275,0},
			{0.2510,0.1255,0.5020},
			{0.7529,0.1255,0.5020},
			{0.2510,0.6275,0.5020},
			{0.7529,0.6275,0.5020},
			{0,0.3765,0},
			{0.5020,0.3765,0},
			{0,0.8784,0},
			{0.5020,0.8784,0},
			{0,0.3765,0.5020},
			{0.5020,0.3765,0.5020},
			{0,0.8784,0.5020},
			{0.5020,0.8784,0.5020},
			{0.2510,0.3765,0},
			{0.7529,0.3765,0},
			{0.2510,0.8784,0},
			{0.7529,0.8784,0},
			{0.2510,0.3765,0.5020},
			{0.7529,0.3765,0.5020},
			{0.2510,0.8784,0.5020},
			{0.7529,0.8784,0.5020},
			{0,0.1255,0.2510},
			{0.5020,0.1255,0.2510},
			{0,0.6275,0.2510},
			{0.5020,0.6275,0.2510},
			{0,0.1255,0.7529},
			{0.5020,0.1255,0.7529},
			{0,0.6275,0.7529},
			{0.5020,0.6275,0.7529},
			{0.2510,0.1255,0.2510},
			{0.7529,0.1255,0.2510},
			{0.2510,0.6275,0.2510},
			{0.7529,0.6275,0.2510},
			{0.2510,0.1255,0.7529},
			{0.7529,0.1255,0.7529},
			{0.2510,0.6275,0.7529},
			{0.7529,0.6275,0.7529},
			{0,0.3765,0.2510},
			{0.5020,0.3765,0.2510},
			{0,0.8784,0.2510},
			{0.5020,0.8784,0.2510},
			{0,0.3765,0.7529},
			{0.5020,0.3765,0.7529},
			{0,0.8784,0.7529},
			{0.5020,0.8784,0.7529},
			{0.2510,0.3765,0.2510},
			{0.7529,0.3765,0.2510},
			{0.2510,0.8784,0.2510},
			{0.7529,0.8784,0.2510},
			{0.2510,0.3765,0.7529},
			{0.7529,0.3765,0.7529},
			{0.2510,0.8784,0.7529},
			{0.7529,0.8784,0.7529},
			{0.1255,0.1255,0},
			{0.6275,0.1255,0},
			{0.1255,0.6275,0},
			{0.6275,0.6275,0},
			{0.1255,0.1255,0.5020},
			{0.6275,0.1255,0.5020},
			{0.1255,0.6275,0.5020},
			{0.6275,0.6275,0.5020},
			{0.3765,0.1255,0},
			{0.8784,0.1255,0},
			{0.3765,0.6275,0},
			{0.8784,0.6275,0},
			{0.3765,0.1255,0.5020},
			{0.8784,0.1255,0.5020},
			{0.3765,0.6275,0.5020},
			{0.8784,0.6275,0.5020},
			{0.1255,0.3765,0},
			{0.6275,0.3765,0},
			{0.1255,0.8784,0},
			{0.6275,0.8784,0},
			{0.1255,0.3765,0.5020},
			{0.6275,0.3765,0.5020},
			{0.1255,0.8784,0.5020},
			{0.6275,0.8784,0.5020},
			{0.3765,0.3765,0},
			{0.8784,0.3765,0},
			{0.3765,0.8784,0},
			{0.8784,0.8784,0},
			{0.3765,0.3765,0.5020},
			{0.8784,0.3765,0.5020},
			{0.3765,0.8784,0.5020},
			{0.8784,0.8784,0.5020},
			{0.1255,0.1255,0.2510},
			{0.6275,0.1255,0.2510},
			{0.1255,0.6275,0.2510},
			{0.6275,0.6275,0.2510},
			{0.1255,0.1255,0.7529},
			{0.6275,0.1255,0.7529},
			{0.1255,0.6275,0.7529},
			{0.6275,0.6275,0.7529},
			{0.3765,0.1255,0.2510},
			{0.8784,0.1255,0.2510},
			{0.3765,0.6275,0.2510},
			{0.8784,0.6275,0.2510},
			{0.3765,0.1255,0.7529},
			{0.8784,0.1255,0.7529},
			{0.3765,0.6275,0.7529},
			{0.8784,0.6275,0.7529},
			{0.1255,0.3765,0.2510},
			{0.6275,0.3765,0.2510},
			{0.1255,0.8784,0.2510},
			{0.6275,0.8784,0.2510},
			{0.1255,0.3765,0.7529},
			{0.6275,0.3765,0.7529},
			{0.1255,0.8784,0.7529},
			{0.6275,0.8784,0.7529},
			{0.3765,0.3765,0.2510},
			{0.8784,0.3765,0.2510},
			{0.3765,0.8784,0.2510},
			{0.8784,0.8784,0.2510},
			{0.3765,0.3765,0.7529},
			{0.8784,0.3765,0.7529},
			{0.3765,0.8784,0.7529},
			{0.8784,0.8784,0.7529}};

		for (int i=0; i<bottom.size(); i++)
		{
			cv::Mat im_data(bottom[i]->height(), bottom[i]->width(), CV_8UC3);

			if (this->layer_param().show_img_param().image_type(i) == 0) 		//gray
			{
		  		for (int p1 = 0; p1 < bottom[i]->height(); p1 ++)
		  	  		for (int p2 = 0; p2 < bottom[i]->width(); p2 ++)
					{
		  	  			im_data.at<uchar>(p1, p2*3+0) = color_map[(int)bottom[i]->data_at(0, 0, p1, p2)][2] * 255; 	//bgr
		  	  			im_data.at<uchar>(p1, p2*3+1) = color_map[(int)bottom[i]->data_at(0, 0, p1, p2)][1] * 255;
		  	  			im_data.at<uchar>(p1, p2*3+2) = color_map[(int)bottom[i]->data_at(0, 0, p1, p2)][0] * 255;
					}
			}
			else if (this->layer_param().show_img_param().image_type(i) == 1) 		//rgb
			{
		  		for (int p1 = 0; p1 < bottom[i]->height(); p1 ++)
		  	  		for (int p2 = 0; p2 < bottom[i]->width(); p2 ++)
					{
		  	  			im_data.at<uchar>(p1, p2*3+0) = (int)(bottom[i]->data_at(0, 0, p1, p2)+104);
		  	  			im_data.at<uchar>(p1, p2*3+1) = (int)(bottom[i]->data_at(0, 1, p1, p2)+117);
		  	  			im_data.at<uchar>(p1, p2*3+2) = (int)(bottom[i]->data_at(0, 2, p1, p2)+123);
					}
			}
			else if (this->layer_param().show_img_param().image_type(i) == 2 ) 		//max_value
			{
				for (int h=0; h < bottom[i]->height(); h++)
					for (int w=0; w < bottom[i]->width(); w++)
					{
						int max_idx = 0;
						Dtype max_value = bottom[i]->data_at(0, 0, h, w);
						for (int c=0; c < bottom[i]->channels(); c++)
							if (bottom[i]->data_at(0, c, h, w) > max_value)
							{
								max_value = bottom[i]->data_at(0, c, h, w);
								max_idx = c;
							}
		  	  			im_data.at<uchar>(h, w*3+0) = color_map[max_idx][2] * 255;
		  	  			im_data.at<uchar>(h, w*3+1) = color_map[max_idx][1] * 255;
		  	  			im_data.at<uchar>(h, w*3+2) = color_map[max_idx][0] * 255;
					}
			}
			else if (this->layer_param().show_img_param().image_type(i) == 3 ) 		//pos_value
			{
				for (int h=0; h < bottom[i]->height(); h++)
					for (int w=0; w < bottom[i]->width(); w++)
					{
						int cnt = 0;
		  	  			im_data.at<uchar>(h, w*3+0) = color_map[0][2] * 255;
		  	  			im_data.at<uchar>(h, w*3+1) = color_map[0][1] * 255;
		  	  			im_data.at<uchar>(h, w*3+2) = color_map[0][0] * 255;

						for (int c=0; c < bottom[i]->channels(); c++)
							if (bottom[i]->data_at(0, c, h, w) > 1e-6)
							{
								im_data.at<uchar>(h, w*3+0) = ((int)im_data.at<uchar>(h, w*3+0) * cnt + color_map[c + 1][2] * 255) / (cnt + 1);
								im_data.at<uchar>(h, w*3+1) = ((int)im_data.at<uchar>(h, w*3+1) * cnt + color_map[c + 1][1] * 255) / (cnt + 1);
								im_data.at<uchar>(h, w*3+2) = ((int)im_data.at<uchar>(h, w*3+2) * cnt + color_map[c + 1][0] * 255) / (cnt + 1);
								cnt = cnt + 1;
							}
					}
			}
			cv::resize(im_data, im_data, cv::Size(im_data.cols / im_data.rows * 360, 360));
			char temp_path[30];
			sprintf(temp_path, "bottom_%d", i);
			cv::imshow(temp_path, im_data);
		}
		if (this->layer_param().show_img_param().pause())
			cv::waitKey();
		else
		    cv::waitKey(10);
	}
}

template <typename Dtype>
void ShowImgLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
  for (int i = 0; i < bottom.size(); ++i) {
    if (propagate_down[i]) {
      caffe_gpu_set(bottom[i]->count(), Dtype(0),
                    bottom[i]->mutable_gpu_data());
    }
  }
}

INSTANTIATE_LAYER_GPU_FUNCS(ShowImgLayer);

}  // namespace caffe
